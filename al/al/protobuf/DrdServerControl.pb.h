// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DrdServerControl.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DrdServerControl_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DrdServerControl_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DrdServerControl_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DrdServerControl_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DrdServerControl_2eproto;
class DSPlayer;
class DSPlayerDefaultTypeInternal;
extern DSPlayerDefaultTypeInternal _DSPlayer_default_instance_;
class DdrBattleEnd;
class DdrBattleEndDefaultTypeInternal;
extern DdrBattleEndDefaultTypeInternal _DdrBattleEnd_default_instance_;
class DdrHeartBeat;
class DdrHeartBeatDefaultTypeInternal;
extern DdrHeartBeatDefaultTypeInternal _DdrHeartBeat_default_instance_;
class DdrPrepareBattleRoomResult;
class DdrPrepareBattleRoomResultDefaultTypeInternal;
extern DdrPrepareBattleRoomResultDefaultTypeInternal _DdrPrepareBattleRoomResult_default_instance_;
class DdrRegisterDSServer;
class DdrRegisterDSServerDefaultTypeInternal;
extern DdrRegisterDSServerDefaultTypeInternal _DdrRegisterDSServer_default_instance_;
class DrdBattleEnd;
class DrdBattleEndDefaultTypeInternal;
extern DrdBattleEndDefaultTypeInternal _DrdBattleEnd_default_instance_;
class DrdHeartBeat;
class DrdHeartBeatDefaultTypeInternal;
extern DrdHeartBeatDefaultTypeInternal _DrdHeartBeat_default_instance_;
class DrdPrepareBattleRoom;
class DrdPrepareBattleRoomDefaultTypeInternal;
extern DrdPrepareBattleRoomDefaultTypeInternal _DrdPrepareBattleRoom_default_instance_;
class DrdRegisterDSServerResult;
class DrdRegisterDSServerResultDefaultTypeInternal;
extern DrdRegisterDSServerResultDefaultTypeInternal _DrdRegisterDSServerResult_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DSPlayer* Arena::CreateMaybeMessage<::DSPlayer>(Arena*);
template<> ::DdrBattleEnd* Arena::CreateMaybeMessage<::DdrBattleEnd>(Arena*);
template<> ::DdrHeartBeat* Arena::CreateMaybeMessage<::DdrHeartBeat>(Arena*);
template<> ::DdrPrepareBattleRoomResult* Arena::CreateMaybeMessage<::DdrPrepareBattleRoomResult>(Arena*);
template<> ::DdrRegisterDSServer* Arena::CreateMaybeMessage<::DdrRegisterDSServer>(Arena*);
template<> ::DrdBattleEnd* Arena::CreateMaybeMessage<::DrdBattleEnd>(Arena*);
template<> ::DrdHeartBeat* Arena::CreateMaybeMessage<::DrdHeartBeat>(Arena*);
template<> ::DrdPrepareBattleRoom* Arena::CreateMaybeMessage<::DrdPrepareBattleRoom>(Arena*);
template<> ::DrdRegisterDSServerResult* Arena::CreateMaybeMessage<::DrdRegisterDSServerResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class DdrRegisterDSServer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DdrRegisterDSServer) */ {
 public:
  DdrRegisterDSServer();
  virtual ~DdrRegisterDSServer();

  DdrRegisterDSServer(const DdrRegisterDSServer& from);
  DdrRegisterDSServer(DdrRegisterDSServer&& from) noexcept
    : DdrRegisterDSServer() {
    *this = ::std::move(from);
  }

  inline DdrRegisterDSServer& operator=(const DdrRegisterDSServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DdrRegisterDSServer& operator=(DdrRegisterDSServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DdrRegisterDSServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DdrRegisterDSServer* internal_default_instance() {
    return reinterpret_cast<const DdrRegisterDSServer*>(
               &_DdrRegisterDSServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DdrRegisterDSServer& a, DdrRegisterDSServer& b) {
    a.Swap(&b);
  }
  inline void Swap(DdrRegisterDSServer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DdrRegisterDSServer* New() const final {
    return CreateMaybeMessage<DdrRegisterDSServer>(nullptr);
  }

  DdrRegisterDSServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DdrRegisterDSServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DdrRegisterDSServer& from);
  void MergeFrom(const DdrRegisterDSServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DdrRegisterDSServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DdrRegisterDSServer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DrdServerControl_2eproto);
    return ::descriptor_table_DrdServerControl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 2,
    kDsidFieldNumber = 1,
    kPortFieldNumber = 3,
  };
  // optional string ip = 2;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional int32 dsid = 1;
  bool has_dsid() const;
  private:
  bool _internal_has_dsid() const;
  public:
  void clear_dsid();
  ::PROTOBUF_NAMESPACE_ID::int32 dsid() const;
  void set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dsid() const;
  void _internal_set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 port = 3;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DdrRegisterDSServer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 dsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  friend struct ::TableStruct_DrdServerControl_2eproto;
};
// -------------------------------------------------------------------

class DrdRegisterDSServerResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DrdRegisterDSServerResult) */ {
 public:
  DrdRegisterDSServerResult();
  virtual ~DrdRegisterDSServerResult();

  DrdRegisterDSServerResult(const DrdRegisterDSServerResult& from);
  DrdRegisterDSServerResult(DrdRegisterDSServerResult&& from) noexcept
    : DrdRegisterDSServerResult() {
    *this = ::std::move(from);
  }

  inline DrdRegisterDSServerResult& operator=(const DrdRegisterDSServerResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrdRegisterDSServerResult& operator=(DrdRegisterDSServerResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrdRegisterDSServerResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrdRegisterDSServerResult* internal_default_instance() {
    return reinterpret_cast<const DrdRegisterDSServerResult*>(
               &_DrdRegisterDSServerResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DrdRegisterDSServerResult& a, DrdRegisterDSServerResult& b) {
    a.Swap(&b);
  }
  inline void Swap(DrdRegisterDSServerResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrdRegisterDSServerResult* New() const final {
    return CreateMaybeMessage<DrdRegisterDSServerResult>(nullptr);
  }

  DrdRegisterDSServerResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrdRegisterDSServerResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrdRegisterDSServerResult& from);
  void MergeFrom(const DrdRegisterDSServerResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrdRegisterDSServerResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DrdRegisterDSServerResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DrdServerControl_2eproto);
    return ::descriptor_table_DrdServerControl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 2,
    kDsidFieldNumber = 1,
    kPortFieldNumber = 3,
    kResultFieldNumber = 4,
  };
  // optional string ip = 2;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional int32 dsid = 1;
  bool has_dsid() const;
  private:
  bool _internal_has_dsid() const;
  public:
  void clear_dsid();
  ::PROTOBUF_NAMESPACE_ID::int32 dsid() const;
  void set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dsid() const;
  void _internal_set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 port = 3;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 result = 4;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DrdRegisterDSServerResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 dsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  friend struct ::TableStruct_DrdServerControl_2eproto;
};
// -------------------------------------------------------------------

class DSPlayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DSPlayer) */ {
 public:
  DSPlayer();
  virtual ~DSPlayer();

  DSPlayer(const DSPlayer& from);
  DSPlayer(DSPlayer&& from) noexcept
    : DSPlayer() {
    *this = ::std::move(from);
  }

  inline DSPlayer& operator=(const DSPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DSPlayer& operator=(DSPlayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DSPlayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DSPlayer* internal_default_instance() {
    return reinterpret_cast<const DSPlayer*>(
               &_DSPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DSPlayer& a, DSPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(DSPlayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DSPlayer* New() const final {
    return CreateMaybeMessage<DSPlayer>(nullptr);
  }

  DSPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DSPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DSPlayer& from);
  void MergeFrom(const DSPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DSPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DSPlayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DrdServerControl_2eproto);
    return ::descriptor_table_DrdServerControl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLevelFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional int32 level = 2;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DSPlayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  friend struct ::TableStruct_DrdServerControl_2eproto;
};
// -------------------------------------------------------------------

class DrdPrepareBattleRoom :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DrdPrepareBattleRoom) */ {
 public:
  DrdPrepareBattleRoom();
  virtual ~DrdPrepareBattleRoom();

  DrdPrepareBattleRoom(const DrdPrepareBattleRoom& from);
  DrdPrepareBattleRoom(DrdPrepareBattleRoom&& from) noexcept
    : DrdPrepareBattleRoom() {
    *this = ::std::move(from);
  }

  inline DrdPrepareBattleRoom& operator=(const DrdPrepareBattleRoom& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrdPrepareBattleRoom& operator=(DrdPrepareBattleRoom&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrdPrepareBattleRoom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrdPrepareBattleRoom* internal_default_instance() {
    return reinterpret_cast<const DrdPrepareBattleRoom*>(
               &_DrdPrepareBattleRoom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DrdPrepareBattleRoom& a, DrdPrepareBattleRoom& b) {
    a.Swap(&b);
  }
  inline void Swap(DrdPrepareBattleRoom* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrdPrepareBattleRoom* New() const final {
    return CreateMaybeMessage<DrdPrepareBattleRoom>(nullptr);
  }

  DrdPrepareBattleRoom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrdPrepareBattleRoom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrdPrepareBattleRoom& from);
  void MergeFrom(const DrdPrepareBattleRoom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrdPrepareBattleRoom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DrdPrepareBattleRoom";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DrdServerControl_2eproto);
    return ::descriptor_table_DrdServerControl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 3,
    kMapFieldNumber = 2,
    kDsidFieldNumber = 1,
    kSceneidFieldNumber = 4,
  };
  // repeated .DSPlayer player = 3;
  int player_size() const;
  private:
  int _internal_player_size() const;
  public:
  void clear_player();
  ::DSPlayer* mutable_player(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DSPlayer >*
      mutable_player();
  private:
  const ::DSPlayer& _internal_player(int index) const;
  ::DSPlayer* _internal_add_player();
  public:
  const ::DSPlayer& player(int index) const;
  ::DSPlayer* add_player();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DSPlayer >&
      player() const;

  // optional string map = 2;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const std::string& map() const;
  void set_map(const std::string& value);
  void set_map(std::string&& value);
  void set_map(const char* value);
  void set_map(const char* value, size_t size);
  std::string* mutable_map();
  std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // optional int32 dsid = 1;
  bool has_dsid() const;
  private:
  bool _internal_has_dsid() const;
  public:
  void clear_dsid();
  ::PROTOBUF_NAMESPACE_ID::int32 dsid() const;
  void set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dsid() const;
  void _internal_set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 sceneid = 4;
  bool has_sceneid() const;
  private:
  bool _internal_has_sceneid() const;
  public:
  void clear_sceneid();
  ::PROTOBUF_NAMESPACE_ID::int32 sceneid() const;
  void set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sceneid() const;
  void _internal_set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DrdPrepareBattleRoom)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DSPlayer > player_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
  ::PROTOBUF_NAMESPACE_ID::int32 dsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 sceneid_;
  friend struct ::TableStruct_DrdServerControl_2eproto;
};
// -------------------------------------------------------------------

class DdrPrepareBattleRoomResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DdrPrepareBattleRoomResult) */ {
 public:
  DdrPrepareBattleRoomResult();
  virtual ~DdrPrepareBattleRoomResult();

  DdrPrepareBattleRoomResult(const DdrPrepareBattleRoomResult& from);
  DdrPrepareBattleRoomResult(DdrPrepareBattleRoomResult&& from) noexcept
    : DdrPrepareBattleRoomResult() {
    *this = ::std::move(from);
  }

  inline DdrPrepareBattleRoomResult& operator=(const DdrPrepareBattleRoomResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline DdrPrepareBattleRoomResult& operator=(DdrPrepareBattleRoomResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DdrPrepareBattleRoomResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DdrPrepareBattleRoomResult* internal_default_instance() {
    return reinterpret_cast<const DdrPrepareBattleRoomResult*>(
               &_DdrPrepareBattleRoomResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DdrPrepareBattleRoomResult& a, DdrPrepareBattleRoomResult& b) {
    a.Swap(&b);
  }
  inline void Swap(DdrPrepareBattleRoomResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DdrPrepareBattleRoomResult* New() const final {
    return CreateMaybeMessage<DdrPrepareBattleRoomResult>(nullptr);
  }

  DdrPrepareBattleRoomResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DdrPrepareBattleRoomResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DdrPrepareBattleRoomResult& from);
  void MergeFrom(const DdrPrepareBattleRoomResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DdrPrepareBattleRoomResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DdrPrepareBattleRoomResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DrdServerControl_2eproto);
    return ::descriptor_table_DrdServerControl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 2,
    kDsidFieldNumber = 1,
    kResultFieldNumber = 3,
    kSceneidFieldNumber = 4,
  };
  // optional string map = 2;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const std::string& map() const;
  void set_map(const std::string& value);
  void set_map(std::string&& value);
  void set_map(const char* value);
  void set_map(const char* value, size_t size);
  std::string* mutable_map();
  std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // optional int32 dsid = 1;
  bool has_dsid() const;
  private:
  bool _internal_has_dsid() const;
  public:
  void clear_dsid();
  ::PROTOBUF_NAMESPACE_ID::int32 dsid() const;
  void set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dsid() const;
  void _internal_set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 sceneid = 4;
  bool has_sceneid() const;
  private:
  bool _internal_has_sceneid() const;
  public:
  void clear_sceneid();
  ::PROTOBUF_NAMESPACE_ID::int32 sceneid() const;
  void set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sceneid() const;
  void _internal_set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DdrPrepareBattleRoomResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
  ::PROTOBUF_NAMESPACE_ID::int32 dsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  ::PROTOBUF_NAMESPACE_ID::int32 sceneid_;
  friend struct ::TableStruct_DrdServerControl_2eproto;
};
// -------------------------------------------------------------------

class DdrHeartBeat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DdrHeartBeat) */ {
 public:
  DdrHeartBeat();
  virtual ~DdrHeartBeat();

  DdrHeartBeat(const DdrHeartBeat& from);
  DdrHeartBeat(DdrHeartBeat&& from) noexcept
    : DdrHeartBeat() {
    *this = ::std::move(from);
  }

  inline DdrHeartBeat& operator=(const DdrHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline DdrHeartBeat& operator=(DdrHeartBeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DdrHeartBeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DdrHeartBeat* internal_default_instance() {
    return reinterpret_cast<const DdrHeartBeat*>(
               &_DdrHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DdrHeartBeat& a, DdrHeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(DdrHeartBeat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DdrHeartBeat* New() const final {
    return CreateMaybeMessage<DdrHeartBeat>(nullptr);
  }

  DdrHeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DdrHeartBeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DdrHeartBeat& from);
  void MergeFrom(const DdrHeartBeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DdrHeartBeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DdrHeartBeat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DrdServerControl_2eproto);
    return ::descriptor_table_DrdServerControl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDsidFieldNumber = 1,
    kTimesFieldNumber = 2,
  };
  // optional int32 dsid = 1;
  bool has_dsid() const;
  private:
  bool _internal_has_dsid() const;
  public:
  void clear_dsid();
  ::PROTOBUF_NAMESPACE_ID::int32 dsid() const;
  void set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dsid() const;
  void _internal_set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 times = 2;
  bool has_times() const;
  private:
  bool _internal_has_times() const;
  public:
  void clear_times();
  ::PROTOBUF_NAMESPACE_ID::int32 times() const;
  void set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_times() const;
  void _internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DdrHeartBeat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 dsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 times_;
  friend struct ::TableStruct_DrdServerControl_2eproto;
};
// -------------------------------------------------------------------

class DrdHeartBeat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DrdHeartBeat) */ {
 public:
  DrdHeartBeat();
  virtual ~DrdHeartBeat();

  DrdHeartBeat(const DrdHeartBeat& from);
  DrdHeartBeat(DrdHeartBeat&& from) noexcept
    : DrdHeartBeat() {
    *this = ::std::move(from);
  }

  inline DrdHeartBeat& operator=(const DrdHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrdHeartBeat& operator=(DrdHeartBeat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrdHeartBeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrdHeartBeat* internal_default_instance() {
    return reinterpret_cast<const DrdHeartBeat*>(
               &_DrdHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DrdHeartBeat& a, DrdHeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(DrdHeartBeat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrdHeartBeat* New() const final {
    return CreateMaybeMessage<DrdHeartBeat>(nullptr);
  }

  DrdHeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrdHeartBeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrdHeartBeat& from);
  void MergeFrom(const DrdHeartBeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrdHeartBeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DrdHeartBeat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DrdServerControl_2eproto);
    return ::descriptor_table_DrdServerControl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDsidFieldNumber = 1,
    kTimesFieldNumber = 2,
  };
  // optional int32 dsid = 1;
  bool has_dsid() const;
  private:
  bool _internal_has_dsid() const;
  public:
  void clear_dsid();
  ::PROTOBUF_NAMESPACE_ID::int32 dsid() const;
  void set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dsid() const;
  void _internal_set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 times = 2;
  bool has_times() const;
  private:
  bool _internal_has_times() const;
  public:
  void clear_times();
  ::PROTOBUF_NAMESPACE_ID::int32 times() const;
  void set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_times() const;
  void _internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DrdHeartBeat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 dsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 times_;
  friend struct ::TableStruct_DrdServerControl_2eproto;
};
// -------------------------------------------------------------------

class DdrBattleEnd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DdrBattleEnd) */ {
 public:
  DdrBattleEnd();
  virtual ~DdrBattleEnd();

  DdrBattleEnd(const DdrBattleEnd& from);
  DdrBattleEnd(DdrBattleEnd&& from) noexcept
    : DdrBattleEnd() {
    *this = ::std::move(from);
  }

  inline DdrBattleEnd& operator=(const DdrBattleEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline DdrBattleEnd& operator=(DdrBattleEnd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DdrBattleEnd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DdrBattleEnd* internal_default_instance() {
    return reinterpret_cast<const DdrBattleEnd*>(
               &_DdrBattleEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DdrBattleEnd& a, DdrBattleEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(DdrBattleEnd* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DdrBattleEnd* New() const final {
    return CreateMaybeMessage<DdrBattleEnd>(nullptr);
  }

  DdrBattleEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DdrBattleEnd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DdrBattleEnd& from);
  void MergeFrom(const DdrBattleEnd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DdrBattleEnd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DdrBattleEnd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DrdServerControl_2eproto);
    return ::descriptor_table_DrdServerControl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDsidFieldNumber = 1,
    kTimesFieldNumber = 2,
  };
  // optional int32 dsid = 1;
  bool has_dsid() const;
  private:
  bool _internal_has_dsid() const;
  public:
  void clear_dsid();
  ::PROTOBUF_NAMESPACE_ID::int32 dsid() const;
  void set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dsid() const;
  void _internal_set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 times = 2;
  bool has_times() const;
  private:
  bool _internal_has_times() const;
  public:
  void clear_times();
  ::PROTOBUF_NAMESPACE_ID::int32 times() const;
  void set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_times() const;
  void _internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DdrBattleEnd)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 dsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 times_;
  friend struct ::TableStruct_DrdServerControl_2eproto;
};
// -------------------------------------------------------------------

class DrdBattleEnd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DrdBattleEnd) */ {
 public:
  DrdBattleEnd();
  virtual ~DrdBattleEnd();

  DrdBattleEnd(const DrdBattleEnd& from);
  DrdBattleEnd(DrdBattleEnd&& from) noexcept
    : DrdBattleEnd() {
    *this = ::std::move(from);
  }

  inline DrdBattleEnd& operator=(const DrdBattleEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrdBattleEnd& operator=(DrdBattleEnd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DrdBattleEnd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrdBattleEnd* internal_default_instance() {
    return reinterpret_cast<const DrdBattleEnd*>(
               &_DrdBattleEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DrdBattleEnd& a, DrdBattleEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(DrdBattleEnd* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrdBattleEnd* New() const final {
    return CreateMaybeMessage<DrdBattleEnd>(nullptr);
  }

  DrdBattleEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrdBattleEnd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrdBattleEnd& from);
  void MergeFrom(const DrdBattleEnd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrdBattleEnd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DrdBattleEnd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DrdServerControl_2eproto);
    return ::descriptor_table_DrdServerControl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDsidFieldNumber = 1,
    kTimesFieldNumber = 2,
  };
  // optional int32 dsid = 1;
  bool has_dsid() const;
  private:
  bool _internal_has_dsid() const;
  public:
  void clear_dsid();
  ::PROTOBUF_NAMESPACE_ID::int32 dsid() const;
  void set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dsid() const;
  void _internal_set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 times = 2;
  bool has_times() const;
  private:
  bool _internal_has_times() const;
  public:
  void clear_times();
  ::PROTOBUF_NAMESPACE_ID::int32 times() const;
  void set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_times() const;
  void _internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DrdBattleEnd)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 dsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 times_;
  friend struct ::TableStruct_DrdServerControl_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DdrRegisterDSServer

// optional int32 dsid = 1;
inline bool DdrRegisterDSServer::_internal_has_dsid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DdrRegisterDSServer::has_dsid() const {
  return _internal_has_dsid();
}
inline void DdrRegisterDSServer::clear_dsid() {
  dsid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DdrRegisterDSServer::_internal_dsid() const {
  return dsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DdrRegisterDSServer::dsid() const {
  // @@protoc_insertion_point(field_get:DdrRegisterDSServer.dsid)
  return _internal_dsid();
}
inline void DdrRegisterDSServer::_internal_set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  dsid_ = value;
}
inline void DdrRegisterDSServer::set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dsid(value);
  // @@protoc_insertion_point(field_set:DdrRegisterDSServer.dsid)
}

// optional string ip = 2;
inline bool DdrRegisterDSServer::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DdrRegisterDSServer::has_ip() const {
  return _internal_has_ip();
}
inline void DdrRegisterDSServer::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DdrRegisterDSServer::ip() const {
  // @@protoc_insertion_point(field_get:DdrRegisterDSServer.ip)
  return _internal_ip();
}
inline void DdrRegisterDSServer::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:DdrRegisterDSServer.ip)
}
inline std::string* DdrRegisterDSServer::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:DdrRegisterDSServer.ip)
  return _internal_mutable_ip();
}
inline const std::string& DdrRegisterDSServer::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void DdrRegisterDSServer::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DdrRegisterDSServer::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DdrRegisterDSServer.ip)
}
inline void DdrRegisterDSServer::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DdrRegisterDSServer.ip)
}
inline void DdrRegisterDSServer::set_ip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DdrRegisterDSServer.ip)
}
inline std::string* DdrRegisterDSServer::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000001u;
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DdrRegisterDSServer::release_ip() {
  // @@protoc_insertion_point(field_release:DdrRegisterDSServer.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ip_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DdrRegisterDSServer::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:DdrRegisterDSServer.ip)
}

// optional int32 port = 3;
inline bool DdrRegisterDSServer::_internal_has_port() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DdrRegisterDSServer::has_port() const {
  return _internal_has_port();
}
inline void DdrRegisterDSServer::clear_port() {
  port_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DdrRegisterDSServer::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DdrRegisterDSServer::port() const {
  // @@protoc_insertion_point(field_get:DdrRegisterDSServer.port)
  return _internal_port();
}
inline void DdrRegisterDSServer::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  port_ = value;
}
inline void DdrRegisterDSServer::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:DdrRegisterDSServer.port)
}

// -------------------------------------------------------------------

// DrdRegisterDSServerResult

// optional int32 dsid = 1;
inline bool DrdRegisterDSServerResult::_internal_has_dsid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DrdRegisterDSServerResult::has_dsid() const {
  return _internal_has_dsid();
}
inline void DrdRegisterDSServerResult::clear_dsid() {
  dsid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrdRegisterDSServerResult::_internal_dsid() const {
  return dsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrdRegisterDSServerResult::dsid() const {
  // @@protoc_insertion_point(field_get:DrdRegisterDSServerResult.dsid)
  return _internal_dsid();
}
inline void DrdRegisterDSServerResult::_internal_set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  dsid_ = value;
}
inline void DrdRegisterDSServerResult::set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dsid(value);
  // @@protoc_insertion_point(field_set:DrdRegisterDSServerResult.dsid)
}

// optional string ip = 2;
inline bool DrdRegisterDSServerResult::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DrdRegisterDSServerResult::has_ip() const {
  return _internal_has_ip();
}
inline void DrdRegisterDSServerResult::clear_ip() {
  ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DrdRegisterDSServerResult::ip() const {
  // @@protoc_insertion_point(field_get:DrdRegisterDSServerResult.ip)
  return _internal_ip();
}
inline void DrdRegisterDSServerResult::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:DrdRegisterDSServerResult.ip)
}
inline std::string* DrdRegisterDSServerResult::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:DrdRegisterDSServerResult.ip)
  return _internal_mutable_ip();
}
inline const std::string& DrdRegisterDSServerResult::_internal_ip() const {
  return ip_.GetNoArena();
}
inline void DrdRegisterDSServerResult::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DrdRegisterDSServerResult::set_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DrdRegisterDSServerResult.ip)
}
inline void DrdRegisterDSServerResult::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DrdRegisterDSServerResult.ip)
}
inline void DrdRegisterDSServerResult::set_ip(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ip_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DrdRegisterDSServerResult.ip)
}
inline std::string* DrdRegisterDSServerResult::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000001u;
  return ip_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DrdRegisterDSServerResult::release_ip() {
  // @@protoc_insertion_point(field_release:DrdRegisterDSServerResult.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ip_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DrdRegisterDSServerResult::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ip_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:DrdRegisterDSServerResult.ip)
}

// optional int32 port = 3;
inline bool DrdRegisterDSServerResult::_internal_has_port() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DrdRegisterDSServerResult::has_port() const {
  return _internal_has_port();
}
inline void DrdRegisterDSServerResult::clear_port() {
  port_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrdRegisterDSServerResult::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrdRegisterDSServerResult::port() const {
  // @@protoc_insertion_point(field_get:DrdRegisterDSServerResult.port)
  return _internal_port();
}
inline void DrdRegisterDSServerResult::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  port_ = value;
}
inline void DrdRegisterDSServerResult::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:DrdRegisterDSServerResult.port)
}

// optional int32 result = 4;
inline bool DrdRegisterDSServerResult::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DrdRegisterDSServerResult::has_result() const {
  return _internal_has_result();
}
inline void DrdRegisterDSServerResult::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrdRegisterDSServerResult::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrdRegisterDSServerResult::result() const {
  // @@protoc_insertion_point(field_get:DrdRegisterDSServerResult.result)
  return _internal_result();
}
inline void DrdRegisterDSServerResult::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  result_ = value;
}
inline void DrdRegisterDSServerResult::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:DrdRegisterDSServerResult.result)
}

// -------------------------------------------------------------------

// DSPlayer

// optional string name = 1;
inline bool DSPlayer::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DSPlayer::has_name() const {
  return _internal_has_name();
}
inline void DSPlayer::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DSPlayer::name() const {
  // @@protoc_insertion_point(field_get:DSPlayer.name)
  return _internal_name();
}
inline void DSPlayer::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:DSPlayer.name)
}
inline std::string* DSPlayer::mutable_name() {
  // @@protoc_insertion_point(field_mutable:DSPlayer.name)
  return _internal_mutable_name();
}
inline const std::string& DSPlayer::_internal_name() const {
  return name_.GetNoArena();
}
inline void DSPlayer::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DSPlayer::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DSPlayer.name)
}
inline void DSPlayer::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DSPlayer.name)
}
inline void DSPlayer::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DSPlayer.name)
}
inline std::string* DSPlayer::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DSPlayer::release_name() {
  // @@protoc_insertion_point(field_release:DSPlayer.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DSPlayer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:DSPlayer.name)
}

// optional int32 level = 2;
inline bool DSPlayer::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DSPlayer::has_level() const {
  return _internal_has_level();
}
inline void DSPlayer::clear_level() {
  level_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DSPlayer::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DSPlayer::level() const {
  // @@protoc_insertion_point(field_get:DSPlayer.level)
  return _internal_level();
}
inline void DSPlayer::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  level_ = value;
}
inline void DSPlayer::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:DSPlayer.level)
}

// -------------------------------------------------------------------

// DrdPrepareBattleRoom

// optional int32 dsid = 1;
inline bool DrdPrepareBattleRoom::_internal_has_dsid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DrdPrepareBattleRoom::has_dsid() const {
  return _internal_has_dsid();
}
inline void DrdPrepareBattleRoom::clear_dsid() {
  dsid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrdPrepareBattleRoom::_internal_dsid() const {
  return dsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrdPrepareBattleRoom::dsid() const {
  // @@protoc_insertion_point(field_get:DrdPrepareBattleRoom.dsid)
  return _internal_dsid();
}
inline void DrdPrepareBattleRoom::_internal_set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  dsid_ = value;
}
inline void DrdPrepareBattleRoom::set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dsid(value);
  // @@protoc_insertion_point(field_set:DrdPrepareBattleRoom.dsid)
}

// optional string map = 2;
inline bool DrdPrepareBattleRoom::_internal_has_map() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DrdPrepareBattleRoom::has_map() const {
  return _internal_has_map();
}
inline void DrdPrepareBattleRoom::clear_map() {
  map_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DrdPrepareBattleRoom::map() const {
  // @@protoc_insertion_point(field_get:DrdPrepareBattleRoom.map)
  return _internal_map();
}
inline void DrdPrepareBattleRoom::set_map(const std::string& value) {
  _internal_set_map(value);
  // @@protoc_insertion_point(field_set:DrdPrepareBattleRoom.map)
}
inline std::string* DrdPrepareBattleRoom::mutable_map() {
  // @@protoc_insertion_point(field_mutable:DrdPrepareBattleRoom.map)
  return _internal_mutable_map();
}
inline const std::string& DrdPrepareBattleRoom::_internal_map() const {
  return map_.GetNoArena();
}
inline void DrdPrepareBattleRoom::_internal_set_map(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  map_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DrdPrepareBattleRoom::set_map(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  map_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DrdPrepareBattleRoom.map)
}
inline void DrdPrepareBattleRoom::set_map(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  map_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DrdPrepareBattleRoom.map)
}
inline void DrdPrepareBattleRoom::set_map(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  map_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DrdPrepareBattleRoom.map)
}
inline std::string* DrdPrepareBattleRoom::_internal_mutable_map() {
  _has_bits_[0] |= 0x00000001u;
  return map_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DrdPrepareBattleRoom::release_map() {
  // @@protoc_insertion_point(field_release:DrdPrepareBattleRoom.map)
  if (!_internal_has_map()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return map_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DrdPrepareBattleRoom::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  map_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map);
  // @@protoc_insertion_point(field_set_allocated:DrdPrepareBattleRoom.map)
}

// repeated .DSPlayer player = 3;
inline int DrdPrepareBattleRoom::_internal_player_size() const {
  return player_.size();
}
inline int DrdPrepareBattleRoom::player_size() const {
  return _internal_player_size();
}
inline void DrdPrepareBattleRoom::clear_player() {
  player_.Clear();
}
inline ::DSPlayer* DrdPrepareBattleRoom::mutable_player(int index) {
  // @@protoc_insertion_point(field_mutable:DrdPrepareBattleRoom.player)
  return player_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DSPlayer >*
DrdPrepareBattleRoom::mutable_player() {
  // @@protoc_insertion_point(field_mutable_list:DrdPrepareBattleRoom.player)
  return &player_;
}
inline const ::DSPlayer& DrdPrepareBattleRoom::_internal_player(int index) const {
  return player_.Get(index);
}
inline const ::DSPlayer& DrdPrepareBattleRoom::player(int index) const {
  // @@protoc_insertion_point(field_get:DrdPrepareBattleRoom.player)
  return _internal_player(index);
}
inline ::DSPlayer* DrdPrepareBattleRoom::_internal_add_player() {
  return player_.Add();
}
inline ::DSPlayer* DrdPrepareBattleRoom::add_player() {
  // @@protoc_insertion_point(field_add:DrdPrepareBattleRoom.player)
  return _internal_add_player();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DSPlayer >&
DrdPrepareBattleRoom::player() const {
  // @@protoc_insertion_point(field_list:DrdPrepareBattleRoom.player)
  return player_;
}

// optional int32 sceneid = 4;
inline bool DrdPrepareBattleRoom::_internal_has_sceneid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DrdPrepareBattleRoom::has_sceneid() const {
  return _internal_has_sceneid();
}
inline void DrdPrepareBattleRoom::clear_sceneid() {
  sceneid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrdPrepareBattleRoom::_internal_sceneid() const {
  return sceneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrdPrepareBattleRoom::sceneid() const {
  // @@protoc_insertion_point(field_get:DrdPrepareBattleRoom.sceneid)
  return _internal_sceneid();
}
inline void DrdPrepareBattleRoom::_internal_set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  sceneid_ = value;
}
inline void DrdPrepareBattleRoom::set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sceneid(value);
  // @@protoc_insertion_point(field_set:DrdPrepareBattleRoom.sceneid)
}

// -------------------------------------------------------------------

// DdrPrepareBattleRoomResult

// optional int32 dsid = 1;
inline bool DdrPrepareBattleRoomResult::_internal_has_dsid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DdrPrepareBattleRoomResult::has_dsid() const {
  return _internal_has_dsid();
}
inline void DdrPrepareBattleRoomResult::clear_dsid() {
  dsid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DdrPrepareBattleRoomResult::_internal_dsid() const {
  return dsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DdrPrepareBattleRoomResult::dsid() const {
  // @@protoc_insertion_point(field_get:DdrPrepareBattleRoomResult.dsid)
  return _internal_dsid();
}
inline void DdrPrepareBattleRoomResult::_internal_set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  dsid_ = value;
}
inline void DdrPrepareBattleRoomResult::set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dsid(value);
  // @@protoc_insertion_point(field_set:DdrPrepareBattleRoomResult.dsid)
}

// optional string map = 2;
inline bool DdrPrepareBattleRoomResult::_internal_has_map() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DdrPrepareBattleRoomResult::has_map() const {
  return _internal_has_map();
}
inline void DdrPrepareBattleRoomResult::clear_map() {
  map_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DdrPrepareBattleRoomResult::map() const {
  // @@protoc_insertion_point(field_get:DdrPrepareBattleRoomResult.map)
  return _internal_map();
}
inline void DdrPrepareBattleRoomResult::set_map(const std::string& value) {
  _internal_set_map(value);
  // @@protoc_insertion_point(field_set:DdrPrepareBattleRoomResult.map)
}
inline std::string* DdrPrepareBattleRoomResult::mutable_map() {
  // @@protoc_insertion_point(field_mutable:DdrPrepareBattleRoomResult.map)
  return _internal_mutable_map();
}
inline const std::string& DdrPrepareBattleRoomResult::_internal_map() const {
  return map_.GetNoArena();
}
inline void DdrPrepareBattleRoomResult::_internal_set_map(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  map_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DdrPrepareBattleRoomResult::set_map(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  map_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DdrPrepareBattleRoomResult.map)
}
inline void DdrPrepareBattleRoomResult::set_map(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  map_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DdrPrepareBattleRoomResult.map)
}
inline void DdrPrepareBattleRoomResult::set_map(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  map_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DdrPrepareBattleRoomResult.map)
}
inline std::string* DdrPrepareBattleRoomResult::_internal_mutable_map() {
  _has_bits_[0] |= 0x00000001u;
  return map_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DdrPrepareBattleRoomResult::release_map() {
  // @@protoc_insertion_point(field_release:DdrPrepareBattleRoomResult.map)
  if (!_internal_has_map()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return map_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DdrPrepareBattleRoomResult::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  map_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map);
  // @@protoc_insertion_point(field_set_allocated:DdrPrepareBattleRoomResult.map)
}

// optional int32 result = 3;
inline bool DdrPrepareBattleRoomResult::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DdrPrepareBattleRoomResult::has_result() const {
  return _internal_has_result();
}
inline void DdrPrepareBattleRoomResult::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DdrPrepareBattleRoomResult::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DdrPrepareBattleRoomResult::result() const {
  // @@protoc_insertion_point(field_get:DdrPrepareBattleRoomResult.result)
  return _internal_result();
}
inline void DdrPrepareBattleRoomResult::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  result_ = value;
}
inline void DdrPrepareBattleRoomResult::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:DdrPrepareBattleRoomResult.result)
}

// optional int32 sceneid = 4;
inline bool DdrPrepareBattleRoomResult::_internal_has_sceneid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DdrPrepareBattleRoomResult::has_sceneid() const {
  return _internal_has_sceneid();
}
inline void DdrPrepareBattleRoomResult::clear_sceneid() {
  sceneid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DdrPrepareBattleRoomResult::_internal_sceneid() const {
  return sceneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DdrPrepareBattleRoomResult::sceneid() const {
  // @@protoc_insertion_point(field_get:DdrPrepareBattleRoomResult.sceneid)
  return _internal_sceneid();
}
inline void DdrPrepareBattleRoomResult::_internal_set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  sceneid_ = value;
}
inline void DdrPrepareBattleRoomResult::set_sceneid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sceneid(value);
  // @@protoc_insertion_point(field_set:DdrPrepareBattleRoomResult.sceneid)
}

// -------------------------------------------------------------------

// DdrHeartBeat

// optional int32 dsid = 1;
inline bool DdrHeartBeat::_internal_has_dsid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DdrHeartBeat::has_dsid() const {
  return _internal_has_dsid();
}
inline void DdrHeartBeat::clear_dsid() {
  dsid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DdrHeartBeat::_internal_dsid() const {
  return dsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DdrHeartBeat::dsid() const {
  // @@protoc_insertion_point(field_get:DdrHeartBeat.dsid)
  return _internal_dsid();
}
inline void DdrHeartBeat::_internal_set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  dsid_ = value;
}
inline void DdrHeartBeat::set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dsid(value);
  // @@protoc_insertion_point(field_set:DdrHeartBeat.dsid)
}

// optional int32 times = 2;
inline bool DdrHeartBeat::_internal_has_times() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DdrHeartBeat::has_times() const {
  return _internal_has_times();
}
inline void DdrHeartBeat::clear_times() {
  times_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DdrHeartBeat::_internal_times() const {
  return times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DdrHeartBeat::times() const {
  // @@protoc_insertion_point(field_get:DdrHeartBeat.times)
  return _internal_times();
}
inline void DdrHeartBeat::_internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  times_ = value;
}
inline void DdrHeartBeat::set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_times(value);
  // @@protoc_insertion_point(field_set:DdrHeartBeat.times)
}

// -------------------------------------------------------------------

// DrdHeartBeat

// optional int32 dsid = 1;
inline bool DrdHeartBeat::_internal_has_dsid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DrdHeartBeat::has_dsid() const {
  return _internal_has_dsid();
}
inline void DrdHeartBeat::clear_dsid() {
  dsid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrdHeartBeat::_internal_dsid() const {
  return dsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrdHeartBeat::dsid() const {
  // @@protoc_insertion_point(field_get:DrdHeartBeat.dsid)
  return _internal_dsid();
}
inline void DrdHeartBeat::_internal_set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  dsid_ = value;
}
inline void DrdHeartBeat::set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dsid(value);
  // @@protoc_insertion_point(field_set:DrdHeartBeat.dsid)
}

// optional int32 times = 2;
inline bool DrdHeartBeat::_internal_has_times() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DrdHeartBeat::has_times() const {
  return _internal_has_times();
}
inline void DrdHeartBeat::clear_times() {
  times_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrdHeartBeat::_internal_times() const {
  return times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrdHeartBeat::times() const {
  // @@protoc_insertion_point(field_get:DrdHeartBeat.times)
  return _internal_times();
}
inline void DrdHeartBeat::_internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  times_ = value;
}
inline void DrdHeartBeat::set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_times(value);
  // @@protoc_insertion_point(field_set:DrdHeartBeat.times)
}

// -------------------------------------------------------------------

// DdrBattleEnd

// optional int32 dsid = 1;
inline bool DdrBattleEnd::_internal_has_dsid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DdrBattleEnd::has_dsid() const {
  return _internal_has_dsid();
}
inline void DdrBattleEnd::clear_dsid() {
  dsid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DdrBattleEnd::_internal_dsid() const {
  return dsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DdrBattleEnd::dsid() const {
  // @@protoc_insertion_point(field_get:DdrBattleEnd.dsid)
  return _internal_dsid();
}
inline void DdrBattleEnd::_internal_set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  dsid_ = value;
}
inline void DdrBattleEnd::set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dsid(value);
  // @@protoc_insertion_point(field_set:DdrBattleEnd.dsid)
}

// optional int32 times = 2;
inline bool DdrBattleEnd::_internal_has_times() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DdrBattleEnd::has_times() const {
  return _internal_has_times();
}
inline void DdrBattleEnd::clear_times() {
  times_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DdrBattleEnd::_internal_times() const {
  return times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DdrBattleEnd::times() const {
  // @@protoc_insertion_point(field_get:DdrBattleEnd.times)
  return _internal_times();
}
inline void DdrBattleEnd::_internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  times_ = value;
}
inline void DdrBattleEnd::set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_times(value);
  // @@protoc_insertion_point(field_set:DdrBattleEnd.times)
}

// -------------------------------------------------------------------

// DrdBattleEnd

// optional int32 dsid = 1;
inline bool DrdBattleEnd::_internal_has_dsid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DrdBattleEnd::has_dsid() const {
  return _internal_has_dsid();
}
inline void DrdBattleEnd::clear_dsid() {
  dsid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrdBattleEnd::_internal_dsid() const {
  return dsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrdBattleEnd::dsid() const {
  // @@protoc_insertion_point(field_get:DrdBattleEnd.dsid)
  return _internal_dsid();
}
inline void DrdBattleEnd::_internal_set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  dsid_ = value;
}
inline void DrdBattleEnd::set_dsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dsid(value);
  // @@protoc_insertion_point(field_set:DrdBattleEnd.dsid)
}

// optional int32 times = 2;
inline bool DrdBattleEnd::_internal_has_times() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DrdBattleEnd::has_times() const {
  return _internal_has_times();
}
inline void DrdBattleEnd::clear_times() {
  times_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrdBattleEnd::_internal_times() const {
  return times_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrdBattleEnd::times() const {
  // @@protoc_insertion_point(field_get:DrdBattleEnd.times)
  return _internal_times();
}
inline void DrdBattleEnd::_internal_set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  times_ = value;
}
inline void DrdBattleEnd::set_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_times(value);
  // @@protoc_insertion_point(field_set:DrdBattleEnd.times)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DrdServerControl_2eproto
