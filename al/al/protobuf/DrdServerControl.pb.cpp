// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DrdServerControl.proto

#include "DrdServerControl.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_DrdServerControl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DSPlayer_DrdServerControl_2eproto;
class DdrRegisterDSServerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DdrRegisterDSServer> _instance;
} _DdrRegisterDSServer_default_instance_;
class DrdRegisterDSServerResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrdRegisterDSServerResult> _instance;
} _DrdRegisterDSServerResult_default_instance_;
class DSPlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DSPlayer> _instance;
} _DSPlayer_default_instance_;
class DrdPrepareBattleRoomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrdPrepareBattleRoom> _instance;
} _DrdPrepareBattleRoom_default_instance_;
class DdrPrepareBattleRoomResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DdrPrepareBattleRoomResult> _instance;
} _DdrPrepareBattleRoomResult_default_instance_;
class DdrHeartBeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DdrHeartBeat> _instance;
} _DdrHeartBeat_default_instance_;
class DrdHeartBeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrdHeartBeat> _instance;
} _DrdHeartBeat_default_instance_;
class DdrBattleEndDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DdrBattleEnd> _instance;
} _DdrBattleEnd_default_instance_;
class DrdBattleEndDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrdBattleEnd> _instance;
} _DrdBattleEnd_default_instance_;
static void InitDefaultsscc_info_DSPlayer_DrdServerControl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DSPlayer_default_instance_;
    new (ptr) ::DSPlayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DSPlayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DSPlayer_DrdServerControl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DSPlayer_DrdServerControl_2eproto}, {}};

static void InitDefaultsscc_info_DdrBattleEnd_DrdServerControl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DdrBattleEnd_default_instance_;
    new (ptr) ::DdrBattleEnd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DdrBattleEnd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DdrBattleEnd_DrdServerControl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DdrBattleEnd_DrdServerControl_2eproto}, {}};

static void InitDefaultsscc_info_DdrHeartBeat_DrdServerControl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DdrHeartBeat_default_instance_;
    new (ptr) ::DdrHeartBeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DdrHeartBeat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DdrHeartBeat_DrdServerControl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DdrHeartBeat_DrdServerControl_2eproto}, {}};

static void InitDefaultsscc_info_DdrPrepareBattleRoomResult_DrdServerControl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DdrPrepareBattleRoomResult_default_instance_;
    new (ptr) ::DdrPrepareBattleRoomResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DdrPrepareBattleRoomResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DdrPrepareBattleRoomResult_DrdServerControl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DdrPrepareBattleRoomResult_DrdServerControl_2eproto}, {}};

static void InitDefaultsscc_info_DdrRegisterDSServer_DrdServerControl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DdrRegisterDSServer_default_instance_;
    new (ptr) ::DdrRegisterDSServer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DdrRegisterDSServer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DdrRegisterDSServer_DrdServerControl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DdrRegisterDSServer_DrdServerControl_2eproto}, {}};

static void InitDefaultsscc_info_DrdBattleEnd_DrdServerControl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DrdBattleEnd_default_instance_;
    new (ptr) ::DrdBattleEnd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DrdBattleEnd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DrdBattleEnd_DrdServerControl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DrdBattleEnd_DrdServerControl_2eproto}, {}};

static void InitDefaultsscc_info_DrdHeartBeat_DrdServerControl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DrdHeartBeat_default_instance_;
    new (ptr) ::DrdHeartBeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DrdHeartBeat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DrdHeartBeat_DrdServerControl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DrdHeartBeat_DrdServerControl_2eproto}, {}};

static void InitDefaultsscc_info_DrdPrepareBattleRoom_DrdServerControl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DrdPrepareBattleRoom_default_instance_;
    new (ptr) ::DrdPrepareBattleRoom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DrdPrepareBattleRoom::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DrdPrepareBattleRoom_DrdServerControl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DrdPrepareBattleRoom_DrdServerControl_2eproto}, {
      &scc_info_DSPlayer_DrdServerControl_2eproto.base,}};

static void InitDefaultsscc_info_DrdRegisterDSServerResult_DrdServerControl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DrdRegisterDSServerResult_default_instance_;
    new (ptr) ::DrdRegisterDSServerResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DrdRegisterDSServerResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DrdRegisterDSServerResult_DrdServerControl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DrdRegisterDSServerResult_DrdServerControl_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_DrdServerControl_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_DrdServerControl_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_DrdServerControl_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_DrdServerControl_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::DdrRegisterDSServer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DdrRegisterDSServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DdrRegisterDSServer, dsid_),
  PROTOBUF_FIELD_OFFSET(::DdrRegisterDSServer, ip_),
  PROTOBUF_FIELD_OFFSET(::DdrRegisterDSServer, port_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::DrdRegisterDSServerResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DrdRegisterDSServerResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DrdRegisterDSServerResult, dsid_),
  PROTOBUF_FIELD_OFFSET(::DrdRegisterDSServerResult, ip_),
  PROTOBUF_FIELD_OFFSET(::DrdRegisterDSServerResult, port_),
  PROTOBUF_FIELD_OFFSET(::DrdRegisterDSServerResult, result_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::DSPlayer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DSPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DSPlayer, name_),
  PROTOBUF_FIELD_OFFSET(::DSPlayer, level_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::DrdPrepareBattleRoom, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DrdPrepareBattleRoom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DrdPrepareBattleRoom, dsid_),
  PROTOBUF_FIELD_OFFSET(::DrdPrepareBattleRoom, map_),
  PROTOBUF_FIELD_OFFSET(::DrdPrepareBattleRoom, player_),
  PROTOBUF_FIELD_OFFSET(::DrdPrepareBattleRoom, sceneid_),
  1,
  0,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::DdrPrepareBattleRoomResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DdrPrepareBattleRoomResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DdrPrepareBattleRoomResult, dsid_),
  PROTOBUF_FIELD_OFFSET(::DdrPrepareBattleRoomResult, map_),
  PROTOBUF_FIELD_OFFSET(::DdrPrepareBattleRoomResult, result_),
  PROTOBUF_FIELD_OFFSET(::DdrPrepareBattleRoomResult, sceneid_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::DdrHeartBeat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DdrHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DdrHeartBeat, dsid_),
  PROTOBUF_FIELD_OFFSET(::DdrHeartBeat, times_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::DrdHeartBeat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DrdHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DrdHeartBeat, dsid_),
  PROTOBUF_FIELD_OFFSET(::DrdHeartBeat, times_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::DdrBattleEnd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DdrBattleEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DdrBattleEnd, dsid_),
  PROTOBUF_FIELD_OFFSET(::DdrBattleEnd, times_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::DrdBattleEnd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DrdBattleEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DrdBattleEnd, dsid_),
  PROTOBUF_FIELD_OFFSET(::DrdBattleEnd, times_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::DdrRegisterDSServer)},
  { 11, 20, sizeof(::DrdRegisterDSServerResult)},
  { 24, 31, sizeof(::DSPlayer)},
  { 33, 42, sizeof(::DrdPrepareBattleRoom)},
  { 46, 55, sizeof(::DdrPrepareBattleRoomResult)},
  { 59, 66, sizeof(::DdrHeartBeat)},
  { 68, 75, sizeof(::DrdHeartBeat)},
  { 77, 84, sizeof(::DdrBattleEnd)},
  { 86, 93, sizeof(::DrdBattleEnd)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DdrRegisterDSServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DrdRegisterDSServerResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DSPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DrdPrepareBattleRoom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DdrPrepareBattleRoomResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DdrHeartBeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DrdHeartBeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DdrBattleEnd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DrdBattleEnd_default_instance_),
};

const char descriptor_table_protodef_DrdServerControl_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026DrdServerControl.proto\"=\n\023DdrRegisterD"
  "SServer\022\014\n\004dsid\030\001 \001(\005\022\n\n\002ip\030\002 \001(\t\022\014\n\004por"
  "t\030\003 \001(\005\"S\n\031DrdRegisterDSServerResult\022\014\n\004"
  "dsid\030\001 \001(\005\022\n\n\002ip\030\002 \001(\t\022\014\n\004port\030\003 \001(\005\022\016\n\006"
  "result\030\004 \001(\005\"\'\n\010DSPlayer\022\014\n\004name\030\001 \001(\t\022\r"
  "\n\005level\030\002 \001(\005\"]\n\024DrdPrepareBattleRoom\022\014\n"
  "\004dsid\030\001 \001(\005\022\013\n\003map\030\002 \001(\t\022\031\n\006player\030\003 \003(\013"
  "2\t.DSPlayer\022\017\n\007sceneid\030\004 \001(\005\"X\n\032DdrPrepa"
  "reBattleRoomResult\022\014\n\004dsid\030\001 \001(\005\022\013\n\003map\030"
  "\002 \001(\t\022\016\n\006result\030\003 \001(\005\022\017\n\007sceneid\030\004 \001(\005\"+"
  "\n\014DdrHeartBeat\022\014\n\004dsid\030\001 \001(\005\022\r\n\005times\030\002 "
  "\001(\005\"+\n\014DrdHeartBeat\022\014\n\004dsid\030\001 \001(\005\022\r\n\005tim"
  "es\030\002 \001(\005\"+\n\014DdrBattleEnd\022\014\n\004dsid\030\001 \001(\005\022\r"
  "\n\005times\030\002 \001(\005\"+\n\014DrdBattleEnd\022\014\n\004dsid\030\001 "
  "\001(\005\022\r\n\005times\030\002 \001(\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_DrdServerControl_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_DrdServerControl_2eproto_sccs[9] = {
  &scc_info_DSPlayer_DrdServerControl_2eproto.base,
  &scc_info_DdrBattleEnd_DrdServerControl_2eproto.base,
  &scc_info_DdrHeartBeat_DrdServerControl_2eproto.base,
  &scc_info_DdrPrepareBattleRoomResult_DrdServerControl_2eproto.base,
  &scc_info_DdrRegisterDSServer_DrdServerControl_2eproto.base,
  &scc_info_DrdBattleEnd_DrdServerControl_2eproto.base,
  &scc_info_DrdHeartBeat_DrdServerControl_2eproto.base,
  &scc_info_DrdPrepareBattleRoom_DrdServerControl_2eproto.base,
  &scc_info_DrdRegisterDSServerResult_DrdServerControl_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_DrdServerControl_2eproto_once;
static bool descriptor_table_DrdServerControl_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DrdServerControl_2eproto = {
  &descriptor_table_DrdServerControl_2eproto_initialized, descriptor_table_protodef_DrdServerControl_2eproto, "DrdServerControl.proto", 578,
  &descriptor_table_DrdServerControl_2eproto_once, descriptor_table_DrdServerControl_2eproto_sccs, descriptor_table_DrdServerControl_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_DrdServerControl_2eproto::offsets,
  file_level_metadata_DrdServerControl_2eproto, 9, file_level_enum_descriptors_DrdServerControl_2eproto, file_level_service_descriptors_DrdServerControl_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_DrdServerControl_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_DrdServerControl_2eproto), true);

// ===================================================================

void DdrRegisterDSServer::InitAsDefaultInstance() {
}
class DdrRegisterDSServer::_Internal {
 public:
  using HasBits = decltype(std::declval<DdrRegisterDSServer>()._has_bits_);
  static void set_has_dsid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DdrRegisterDSServer::DdrRegisterDSServer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DdrRegisterDSServer)
}
DdrRegisterDSServer::DdrRegisterDSServer(const DdrRegisterDSServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&dsid_, &from.dsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&dsid_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:DdrRegisterDSServer)
}

void DdrRegisterDSServer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DdrRegisterDSServer_DrdServerControl_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&dsid_)) + sizeof(port_));
}

DdrRegisterDSServer::~DdrRegisterDSServer() {
  // @@protoc_insertion_point(destructor:DdrRegisterDSServer)
  SharedDtor();
}

void DdrRegisterDSServer::SharedDtor() {
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DdrRegisterDSServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DdrRegisterDSServer& DdrRegisterDSServer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DdrRegisterDSServer_DrdServerControl_2eproto.base);
  return *internal_default_instance();
}


void DdrRegisterDSServer::Clear() {
// @@protoc_insertion_point(message_clear_start:DdrRegisterDSServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ip_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&dsid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&port_) -
        reinterpret_cast<char*>(&dsid_)) + sizeof(port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DdrRegisterDSServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 dsid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dsid(&has_bits);
          dsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DdrRegisterDSServer.ip");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DdrRegisterDSServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DdrRegisterDSServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dsid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dsid(), target);
  }

  // optional string ip = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "DdrRegisterDSServer.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // optional int32 port = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DdrRegisterDSServer)
  return target;
}

size_t DdrRegisterDSServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DdrRegisterDSServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string ip = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ip());
    }

    // optional int32 dsid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dsid());
    }

    // optional int32 port = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_port());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DdrRegisterDSServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DdrRegisterDSServer)
  GOOGLE_DCHECK_NE(&from, this);
  const DdrRegisterDSServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DdrRegisterDSServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DdrRegisterDSServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DdrRegisterDSServer)
    MergeFrom(*source);
  }
}

void DdrRegisterDSServer::MergeFrom(const DdrRegisterDSServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DdrRegisterDSServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      dsid_ = from.dsid_;
    }
    if (cached_has_bits & 0x00000004u) {
      port_ = from.port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DdrRegisterDSServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DdrRegisterDSServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DdrRegisterDSServer::CopyFrom(const DdrRegisterDSServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DdrRegisterDSServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DdrRegisterDSServer::IsInitialized() const {
  return true;
}

void DdrRegisterDSServer::InternalSwap(DdrRegisterDSServer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dsid_, other->dsid_);
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DdrRegisterDSServer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DrdRegisterDSServerResult::InitAsDefaultInstance() {
}
class DrdRegisterDSServerResult::_Internal {
 public:
  using HasBits = decltype(std::declval<DrdRegisterDSServerResult>()._has_bits_);
  static void set_has_dsid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

DrdRegisterDSServerResult::DrdRegisterDSServerResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DrdRegisterDSServerResult)
}
DrdRegisterDSServerResult::DrdRegisterDSServerResult(const DrdRegisterDSServerResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip()) {
    ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&dsid_, &from.dsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&dsid_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:DrdRegisterDSServerResult)
}

void DrdRegisterDSServerResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DrdRegisterDSServerResult_DrdServerControl_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&dsid_)) + sizeof(result_));
}

DrdRegisterDSServerResult::~DrdRegisterDSServerResult() {
  // @@protoc_insertion_point(destructor:DrdRegisterDSServerResult)
  SharedDtor();
}

void DrdRegisterDSServerResult::SharedDtor() {
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DrdRegisterDSServerResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrdRegisterDSServerResult& DrdRegisterDSServerResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrdRegisterDSServerResult_DrdServerControl_2eproto.base);
  return *internal_default_instance();
}


void DrdRegisterDSServerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:DrdRegisterDSServerResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ip_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&dsid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&dsid_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DrdRegisterDSServerResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 dsid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dsid(&has_bits);
          dsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DrdRegisterDSServerResult.ip");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrdRegisterDSServerResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DrdRegisterDSServerResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dsid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dsid(), target);
  }

  // optional string ip = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "DrdRegisterDSServerResult.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // optional int32 port = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  // optional int32 result = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DrdRegisterDSServerResult)
  return target;
}

size_t DrdRegisterDSServerResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DrdRegisterDSServerResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string ip = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ip());
    }

    // optional int32 dsid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dsid());
    }

    // optional int32 port = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_port());
    }

    // optional int32 result = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrdRegisterDSServerResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DrdRegisterDSServerResult)
  GOOGLE_DCHECK_NE(&from, this);
  const DrdRegisterDSServerResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrdRegisterDSServerResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DrdRegisterDSServerResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DrdRegisterDSServerResult)
    MergeFrom(*source);
  }
}

void DrdRegisterDSServerResult::MergeFrom(const DrdRegisterDSServerResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DrdRegisterDSServerResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (cached_has_bits & 0x00000002u) {
      dsid_ = from.dsid_;
    }
    if (cached_has_bits & 0x00000004u) {
      port_ = from.port_;
    }
    if (cached_has_bits & 0x00000008u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DrdRegisterDSServerResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DrdRegisterDSServerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrdRegisterDSServerResult::CopyFrom(const DrdRegisterDSServerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DrdRegisterDSServerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrdRegisterDSServerResult::IsInitialized() const {
  return true;
}

void DrdRegisterDSServerResult::InternalSwap(DrdRegisterDSServerResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dsid_, other->dsid_);
  swap(port_, other->port_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrdRegisterDSServerResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DSPlayer::InitAsDefaultInstance() {
}
class DSPlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<DSPlayer>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DSPlayer::DSPlayer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DSPlayer)
}
DSPlayer::DSPlayer(const DSPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:DSPlayer)
}

void DSPlayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DSPlayer_DrdServerControl_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
}

DSPlayer::~DSPlayer() {
  // @@protoc_insertion_point(destructor:DSPlayer)
  SharedDtor();
}

void DSPlayer::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DSPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DSPlayer& DSPlayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DSPlayer_DrdServerControl_2eproto.base);
  return *internal_default_instance();
}


void DSPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:DSPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  level_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DSPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DSPlayer.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DSPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DSPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "DSPlayer.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DSPlayer)
  return target;
}

size_t DSPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DSPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DSPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DSPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const DSPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DSPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DSPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DSPlayer)
    MergeFrom(*source);
  }
}

void DSPlayer::MergeFrom(const DSPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DSPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DSPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DSPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DSPlayer::CopyFrom(const DSPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DSPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DSPlayer::IsInitialized() const {
  return true;
}

void DSPlayer::InternalSwap(DSPlayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DSPlayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DrdPrepareBattleRoom::InitAsDefaultInstance() {
}
class DrdPrepareBattleRoom::_Internal {
 public:
  using HasBits = decltype(std::declval<DrdPrepareBattleRoom>()._has_bits_);
  static void set_has_dsid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sceneid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DrdPrepareBattleRoom::DrdPrepareBattleRoom()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DrdPrepareBattleRoom)
}
DrdPrepareBattleRoom::DrdPrepareBattleRoom(const DrdPrepareBattleRoom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      player_(from.player_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_map()) {
    map_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_);
  }
  ::memcpy(&dsid_, &from.dsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sceneid_) -
    reinterpret_cast<char*>(&dsid_)) + sizeof(sceneid_));
  // @@protoc_insertion_point(copy_constructor:DrdPrepareBattleRoom)
}

void DrdPrepareBattleRoom::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DrdPrepareBattleRoom_DrdServerControl_2eproto.base);
  map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sceneid_) -
      reinterpret_cast<char*>(&dsid_)) + sizeof(sceneid_));
}

DrdPrepareBattleRoom::~DrdPrepareBattleRoom() {
  // @@protoc_insertion_point(destructor:DrdPrepareBattleRoom)
  SharedDtor();
}

void DrdPrepareBattleRoom::SharedDtor() {
  map_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DrdPrepareBattleRoom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrdPrepareBattleRoom& DrdPrepareBattleRoom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrdPrepareBattleRoom_DrdServerControl_2eproto.base);
  return *internal_default_instance();
}


void DrdPrepareBattleRoom::Clear() {
// @@protoc_insertion_point(message_clear_start:DrdPrepareBattleRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    map_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&dsid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sceneid_) -
        reinterpret_cast<char*>(&dsid_)) + sizeof(sceneid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DrdPrepareBattleRoom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 dsid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dsid(&has_bits);
          dsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_map();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DrdPrepareBattleRoom.map");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .DSPlayer player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 sceneid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_sceneid(&has_bits);
          sceneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrdPrepareBattleRoom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DrdPrepareBattleRoom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dsid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dsid(), target);
  }

  // optional string map = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map().data(), static_cast<int>(this->_internal_map().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "DrdPrepareBattleRoom.map");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_map(), target);
  }

  // repeated .DSPlayer player = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_player(i), target, stream);
  }

  // optional int32 sceneid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_sceneid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DrdPrepareBattleRoom)
  return target;
}

size_t DrdPrepareBattleRoom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DrdPrepareBattleRoom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DSPlayer player = 3;
  total_size += 1UL * this->_internal_player_size();
  for (const auto& msg : this->player_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string map = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map());
    }

    // optional int32 dsid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dsid());
    }

    // optional int32 sceneid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sceneid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrdPrepareBattleRoom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DrdPrepareBattleRoom)
  GOOGLE_DCHECK_NE(&from, this);
  const DrdPrepareBattleRoom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrdPrepareBattleRoom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DrdPrepareBattleRoom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DrdPrepareBattleRoom)
    MergeFrom(*source);
  }
}

void DrdPrepareBattleRoom::MergeFrom(const DrdPrepareBattleRoom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DrdPrepareBattleRoom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_.MergeFrom(from.player_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      map_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_);
    }
    if (cached_has_bits & 0x00000002u) {
      dsid_ = from.dsid_;
    }
    if (cached_has_bits & 0x00000004u) {
      sceneid_ = from.sceneid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DrdPrepareBattleRoom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DrdPrepareBattleRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrdPrepareBattleRoom::CopyFrom(const DrdPrepareBattleRoom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DrdPrepareBattleRoom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrdPrepareBattleRoom::IsInitialized() const {
  return true;
}

void DrdPrepareBattleRoom::InternalSwap(DrdPrepareBattleRoom* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_.InternalSwap(&other->player_);
  map_.Swap(&other->map_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dsid_, other->dsid_);
  swap(sceneid_, other->sceneid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrdPrepareBattleRoom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DdrPrepareBattleRoomResult::InitAsDefaultInstance() {
}
class DdrPrepareBattleRoomResult::_Internal {
 public:
  using HasBits = decltype(std::declval<DdrPrepareBattleRoomResult>()._has_bits_);
  static void set_has_dsid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sceneid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

DdrPrepareBattleRoomResult::DdrPrepareBattleRoomResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DdrPrepareBattleRoomResult)
}
DdrPrepareBattleRoomResult::DdrPrepareBattleRoomResult(const DdrPrepareBattleRoomResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_map()) {
    map_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_);
  }
  ::memcpy(&dsid_, &from.dsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&sceneid_) -
    reinterpret_cast<char*>(&dsid_)) + sizeof(sceneid_));
  // @@protoc_insertion_point(copy_constructor:DdrPrepareBattleRoomResult)
}

void DdrPrepareBattleRoomResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DdrPrepareBattleRoomResult_DrdServerControl_2eproto.base);
  map_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sceneid_) -
      reinterpret_cast<char*>(&dsid_)) + sizeof(sceneid_));
}

DdrPrepareBattleRoomResult::~DdrPrepareBattleRoomResult() {
  // @@protoc_insertion_point(destructor:DdrPrepareBattleRoomResult)
  SharedDtor();
}

void DdrPrepareBattleRoomResult::SharedDtor() {
  map_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DdrPrepareBattleRoomResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DdrPrepareBattleRoomResult& DdrPrepareBattleRoomResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DdrPrepareBattleRoomResult_DrdServerControl_2eproto.base);
  return *internal_default_instance();
}


void DdrPrepareBattleRoomResult::Clear() {
// @@protoc_insertion_point(message_clear_start:DdrPrepareBattleRoomResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    map_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&dsid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sceneid_) -
        reinterpret_cast<char*>(&dsid_)) + sizeof(sceneid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DdrPrepareBattleRoomResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 dsid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dsid(&has_bits);
          dsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_map();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DdrPrepareBattleRoomResult.map");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sceneid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_sceneid(&has_bits);
          sceneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DdrPrepareBattleRoomResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DdrPrepareBattleRoomResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dsid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dsid(), target);
  }

  // optional string map = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map().data(), static_cast<int>(this->_internal_map().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "DdrPrepareBattleRoomResult.map");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_map(), target);
  }

  // optional int32 result = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_result(), target);
  }

  // optional int32 sceneid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_sceneid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DdrPrepareBattleRoomResult)
  return target;
}

size_t DdrPrepareBattleRoomResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DdrPrepareBattleRoomResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string map = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map());
    }

    // optional int32 dsid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dsid());
    }

    // optional int32 result = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_result());
    }

    // optional int32 sceneid = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sceneid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DdrPrepareBattleRoomResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DdrPrepareBattleRoomResult)
  GOOGLE_DCHECK_NE(&from, this);
  const DdrPrepareBattleRoomResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DdrPrepareBattleRoomResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DdrPrepareBattleRoomResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DdrPrepareBattleRoomResult)
    MergeFrom(*source);
  }
}

void DdrPrepareBattleRoomResult::MergeFrom(const DdrPrepareBattleRoomResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DdrPrepareBattleRoomResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      map_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_);
    }
    if (cached_has_bits & 0x00000002u) {
      dsid_ = from.dsid_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      sceneid_ = from.sceneid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DdrPrepareBattleRoomResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DdrPrepareBattleRoomResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DdrPrepareBattleRoomResult::CopyFrom(const DdrPrepareBattleRoomResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DdrPrepareBattleRoomResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DdrPrepareBattleRoomResult::IsInitialized() const {
  return true;
}

void DdrPrepareBattleRoomResult::InternalSwap(DdrPrepareBattleRoomResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  map_.Swap(&other->map_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dsid_, other->dsid_);
  swap(result_, other->result_);
  swap(sceneid_, other->sceneid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DdrPrepareBattleRoomResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DdrHeartBeat::InitAsDefaultInstance() {
}
class DdrHeartBeat::_Internal {
 public:
  using HasBits = decltype(std::declval<DdrHeartBeat>()._has_bits_);
  static void set_has_dsid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_times(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DdrHeartBeat::DdrHeartBeat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DdrHeartBeat)
}
DdrHeartBeat::DdrHeartBeat(const DdrHeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dsid_, &from.dsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&times_) -
    reinterpret_cast<char*>(&dsid_)) + sizeof(times_));
  // @@protoc_insertion_point(copy_constructor:DdrHeartBeat)
}

void DdrHeartBeat::SharedCtor() {
  ::memset(&dsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&dsid_)) + sizeof(times_));
}

DdrHeartBeat::~DdrHeartBeat() {
  // @@protoc_insertion_point(destructor:DdrHeartBeat)
  SharedDtor();
}

void DdrHeartBeat::SharedDtor() {
}

void DdrHeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DdrHeartBeat& DdrHeartBeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DdrHeartBeat_DrdServerControl_2eproto.base);
  return *internal_default_instance();
}


void DdrHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:DdrHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&dsid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&times_) -
        reinterpret_cast<char*>(&dsid_)) + sizeof(times_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DdrHeartBeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 dsid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dsid(&has_bits);
          dsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_times(&has_bits);
          times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DdrHeartBeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DdrHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dsid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dsid(), target);
  }

  // optional int32 times = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DdrHeartBeat)
  return target;
}

size_t DdrHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DdrHeartBeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 dsid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dsid());
    }

    // optional int32 times = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_times());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DdrHeartBeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DdrHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const DdrHeartBeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DdrHeartBeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DdrHeartBeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DdrHeartBeat)
    MergeFrom(*source);
  }
}

void DdrHeartBeat::MergeFrom(const DdrHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DdrHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      dsid_ = from.dsid_;
    }
    if (cached_has_bits & 0x00000002u) {
      times_ = from.times_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DdrHeartBeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DdrHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DdrHeartBeat::CopyFrom(const DdrHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DdrHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DdrHeartBeat::IsInitialized() const {
  return true;
}

void DdrHeartBeat::InternalSwap(DdrHeartBeat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dsid_, other->dsid_);
  swap(times_, other->times_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DdrHeartBeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DrdHeartBeat::InitAsDefaultInstance() {
}
class DrdHeartBeat::_Internal {
 public:
  using HasBits = decltype(std::declval<DrdHeartBeat>()._has_bits_);
  static void set_has_dsid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_times(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DrdHeartBeat::DrdHeartBeat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DrdHeartBeat)
}
DrdHeartBeat::DrdHeartBeat(const DrdHeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dsid_, &from.dsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&times_) -
    reinterpret_cast<char*>(&dsid_)) + sizeof(times_));
  // @@protoc_insertion_point(copy_constructor:DrdHeartBeat)
}

void DrdHeartBeat::SharedCtor() {
  ::memset(&dsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&dsid_)) + sizeof(times_));
}

DrdHeartBeat::~DrdHeartBeat() {
  // @@protoc_insertion_point(destructor:DrdHeartBeat)
  SharedDtor();
}

void DrdHeartBeat::SharedDtor() {
}

void DrdHeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrdHeartBeat& DrdHeartBeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrdHeartBeat_DrdServerControl_2eproto.base);
  return *internal_default_instance();
}


void DrdHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:DrdHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&dsid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&times_) -
        reinterpret_cast<char*>(&dsid_)) + sizeof(times_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DrdHeartBeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 dsid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dsid(&has_bits);
          dsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_times(&has_bits);
          times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrdHeartBeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DrdHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dsid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dsid(), target);
  }

  // optional int32 times = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DrdHeartBeat)
  return target;
}

size_t DrdHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DrdHeartBeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 dsid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dsid());
    }

    // optional int32 times = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_times());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrdHeartBeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DrdHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const DrdHeartBeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrdHeartBeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DrdHeartBeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DrdHeartBeat)
    MergeFrom(*source);
  }
}

void DrdHeartBeat::MergeFrom(const DrdHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DrdHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      dsid_ = from.dsid_;
    }
    if (cached_has_bits & 0x00000002u) {
      times_ = from.times_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DrdHeartBeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DrdHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrdHeartBeat::CopyFrom(const DrdHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DrdHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrdHeartBeat::IsInitialized() const {
  return true;
}

void DrdHeartBeat::InternalSwap(DrdHeartBeat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dsid_, other->dsid_);
  swap(times_, other->times_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrdHeartBeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DdrBattleEnd::InitAsDefaultInstance() {
}
class DdrBattleEnd::_Internal {
 public:
  using HasBits = decltype(std::declval<DdrBattleEnd>()._has_bits_);
  static void set_has_dsid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_times(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DdrBattleEnd::DdrBattleEnd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DdrBattleEnd)
}
DdrBattleEnd::DdrBattleEnd(const DdrBattleEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dsid_, &from.dsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&times_) -
    reinterpret_cast<char*>(&dsid_)) + sizeof(times_));
  // @@protoc_insertion_point(copy_constructor:DdrBattleEnd)
}

void DdrBattleEnd::SharedCtor() {
  ::memset(&dsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&dsid_)) + sizeof(times_));
}

DdrBattleEnd::~DdrBattleEnd() {
  // @@protoc_insertion_point(destructor:DdrBattleEnd)
  SharedDtor();
}

void DdrBattleEnd::SharedDtor() {
}

void DdrBattleEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DdrBattleEnd& DdrBattleEnd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DdrBattleEnd_DrdServerControl_2eproto.base);
  return *internal_default_instance();
}


void DdrBattleEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:DdrBattleEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&dsid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&times_) -
        reinterpret_cast<char*>(&dsid_)) + sizeof(times_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DdrBattleEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 dsid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dsid(&has_bits);
          dsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_times(&has_bits);
          times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DdrBattleEnd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DdrBattleEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dsid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dsid(), target);
  }

  // optional int32 times = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DdrBattleEnd)
  return target;
}

size_t DdrBattleEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DdrBattleEnd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 dsid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dsid());
    }

    // optional int32 times = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_times());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DdrBattleEnd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DdrBattleEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const DdrBattleEnd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DdrBattleEnd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DdrBattleEnd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DdrBattleEnd)
    MergeFrom(*source);
  }
}

void DdrBattleEnd::MergeFrom(const DdrBattleEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DdrBattleEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      dsid_ = from.dsid_;
    }
    if (cached_has_bits & 0x00000002u) {
      times_ = from.times_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DdrBattleEnd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DdrBattleEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DdrBattleEnd::CopyFrom(const DdrBattleEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DdrBattleEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DdrBattleEnd::IsInitialized() const {
  return true;
}

void DdrBattleEnd::InternalSwap(DdrBattleEnd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dsid_, other->dsid_);
  swap(times_, other->times_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DdrBattleEnd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DrdBattleEnd::InitAsDefaultInstance() {
}
class DrdBattleEnd::_Internal {
 public:
  using HasBits = decltype(std::declval<DrdBattleEnd>()._has_bits_);
  static void set_has_dsid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_times(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DrdBattleEnd::DrdBattleEnd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DrdBattleEnd)
}
DrdBattleEnd::DrdBattleEnd(const DrdBattleEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dsid_, &from.dsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&times_) -
    reinterpret_cast<char*>(&dsid_)) + sizeof(times_));
  // @@protoc_insertion_point(copy_constructor:DrdBattleEnd)
}

void DrdBattleEnd::SharedCtor() {
  ::memset(&dsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&times_) -
      reinterpret_cast<char*>(&dsid_)) + sizeof(times_));
}

DrdBattleEnd::~DrdBattleEnd() {
  // @@protoc_insertion_point(destructor:DrdBattleEnd)
  SharedDtor();
}

void DrdBattleEnd::SharedDtor() {
}

void DrdBattleEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrdBattleEnd& DrdBattleEnd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrdBattleEnd_DrdServerControl_2eproto.base);
  return *internal_default_instance();
}


void DrdBattleEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:DrdBattleEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&dsid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&times_) -
        reinterpret_cast<char*>(&dsid_)) + sizeof(times_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DrdBattleEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 dsid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dsid(&has_bits);
          dsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 times = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_times(&has_bits);
          times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrdBattleEnd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DrdBattleEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dsid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dsid(), target);
  }

  // optional int32 times = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DrdBattleEnd)
  return target;
}

size_t DrdBattleEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DrdBattleEnd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 dsid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dsid());
    }

    // optional int32 times = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_times());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrdBattleEnd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DrdBattleEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const DrdBattleEnd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DrdBattleEnd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DrdBattleEnd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DrdBattleEnd)
    MergeFrom(*source);
  }
}

void DrdBattleEnd::MergeFrom(const DrdBattleEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DrdBattleEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      dsid_ = from.dsid_;
    }
    if (cached_has_bits & 0x00000002u) {
      times_ = from.times_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DrdBattleEnd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DrdBattleEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrdBattleEnd::CopyFrom(const DrdBattleEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DrdBattleEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrdBattleEnd::IsInitialized() const {
  return true;
}

void DrdBattleEnd::InternalSwap(DrdBattleEnd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dsid_, other->dsid_);
  swap(times_, other->times_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrdBattleEnd::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DdrRegisterDSServer* Arena::CreateMaybeMessage< ::DdrRegisterDSServer >(Arena* arena) {
  return Arena::CreateInternal< ::DdrRegisterDSServer >(arena);
}
template<> PROTOBUF_NOINLINE ::DrdRegisterDSServerResult* Arena::CreateMaybeMessage< ::DrdRegisterDSServerResult >(Arena* arena) {
  return Arena::CreateInternal< ::DrdRegisterDSServerResult >(arena);
}
template<> PROTOBUF_NOINLINE ::DSPlayer* Arena::CreateMaybeMessage< ::DSPlayer >(Arena* arena) {
  return Arena::CreateInternal< ::DSPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::DrdPrepareBattleRoom* Arena::CreateMaybeMessage< ::DrdPrepareBattleRoom >(Arena* arena) {
  return Arena::CreateInternal< ::DrdPrepareBattleRoom >(arena);
}
template<> PROTOBUF_NOINLINE ::DdrPrepareBattleRoomResult* Arena::CreateMaybeMessage< ::DdrPrepareBattleRoomResult >(Arena* arena) {
  return Arena::CreateInternal< ::DdrPrepareBattleRoomResult >(arena);
}
template<> PROTOBUF_NOINLINE ::DdrHeartBeat* Arena::CreateMaybeMessage< ::DdrHeartBeat >(Arena* arena) {
  return Arena::CreateInternal< ::DdrHeartBeat >(arena);
}
template<> PROTOBUF_NOINLINE ::DrdHeartBeat* Arena::CreateMaybeMessage< ::DrdHeartBeat >(Arena* arena) {
  return Arena::CreateInternal< ::DrdHeartBeat >(arena);
}
template<> PROTOBUF_NOINLINE ::DdrBattleEnd* Arena::CreateMaybeMessage< ::DdrBattleEnd >(Arena* arena) {
  return Arena::CreateInternal< ::DdrBattleEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::DrdBattleEnd* Arena::CreateMaybeMessage< ::DrdBattleEnd >(Arena* arena) {
  return Arena::CreateInternal< ::DrdBattleEnd >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
